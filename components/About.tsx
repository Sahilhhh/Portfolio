
import React, { useState, useCallback } from 'react';
import { getFunFact } from '../services/geminiService';

const SectionTitle: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <h2 className="text-3xl md:text-4xl font-bold text-center mb-12 text-light">
    {children}
  </h2>
);

const About: React.FC = () => {
  const [fact, setFact] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  const handleFetchFact = useCallback(async () => {
    setIsLoading(true);
    setError('');
    setFact('');
    try {
      const newFact = await getFunFact();
      setFact(newFact);
    } catch (err: unknown) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    } finally {
      setIsLoading(false);
    }
  }, []);

  return (
    <section id="about" className="py-24 animate-fade-in-up">
      <SectionTitle>About Me</SectionTitle>
      <div className="max-w-4xl mx-auto text-center text-lg text-medium leading-relaxed">
        <p className="mb-4">
          Hello! I'm Sahil, a full-stack developer with a strong passion for building dynamic and responsive web applications. My journey in tech started with a simple "Hello World" and has since evolved into a career where I get to solve complex problems and create meaningful digital experiences.
        </p>
        <p>
          I thrive in environments that challenge me to learn and adapt, and I'm proficient across the stackâ€”from crafting beautiful UIs with React and Tailwind CSS to designing robust server-side architectures with Node.js and managing databases.
        </p>
        <div className="mt-12 p-6 bg-secondary rounded-lg shadow-xl border border-gray-700/50">
          <h3 className="text-xl font-bold text-light mb-3">AI-Powered Fun Fact!</h3>
          <p className="text-medium mb-4">Curious about web development? Click the button for an interesting fact generated by Google's Gemini API.</p>
          <button
            onClick={handleFetchFact}
            disabled={isLoading}
            className="px-6 py-2 bg-accent text-primary font-bold rounded-lg hover:bg-sky-400 transition-all duration-300 disabled:bg-gray-500 disabled:cursor-not-allowed"
          >
            {isLoading ? 'Thinking...' : 'Generate Fact'}
          </button>
          {fact && <p className="mt-4 text-light bg-primary/50 p-4 rounded-md italic">"{fact}"</p>}
          {error && <p className="mt-4 text-red-400">{error}</p>}
        </div>
      </div>
    </section>
  );
};

export default About;
